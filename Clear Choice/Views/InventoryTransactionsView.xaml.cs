using System;
using System.Collections;
using System.Collections.ObjectModel;
using System.Resources;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using Clear_Choice.Windows;
using ClearChoice;
using ExceptionLogging;
using Stemstudios.DataAccessLayer;
using Stemstudios.DataAccessLayer.DataObjects;
using Stemstudios.DataAccessLayer.DataObjects.Bindings;
using Stemstudios.UIControls;

namespace Clear_Choice.Views
{
    /// <summary>
    /// Interaction logic for InventoryTransactionsView.xaml
    /// </summary>
    public partial class InventoryTransactionsView : UserControl,ISTabView
    {
        private SiteLotSelector siteLotSelectorWindow = null;
        private Database db = Database.Instance;
        private DataSet gridViewData = null;
        private ResourceManager msgCodes = MessageCodes.ResourceManager;

        public InventoryTransactionsView()
        {
            InitializeComponent();
            this.Name = "TransactionsView";
            LoadTransactions(cmboType.SelectedIndex);
        }

        private void addRestockTransBtn_MouseDown(object sender, MouseButtonEventArgs e)
        {
            MainWindow.OpenTab(new InventoryTransactionView());
        }

        private void addItemBtn_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (siteLotSelectorWindow != null)
            {
                siteLotSelectorWindow.Close();
                siteLotSelectorWindow = null;
            }
            siteLotSelectorWindow = new SiteLotSelector();
            siteLotSelectorWindow.ObjectSelected += new RoutedEventHandler(siteLotSelectorWindow_ObjectSelected);
            siteLotSelectorWindow.ShowDialog();
        }

        private void siteLotSelectorWindow_ObjectSelected(object sender, RoutedEventArgs e)
        {
            object selectedItem = ((SiteLotSelector)sender).SelectedItem;
            if (selectedItem.GetType().Equals(typeof(Site)))
            {
                MainWindow.OpenTab(new InventoryTransactionView((Site)selectedItem));
            }
            else
            {
                MainWindow.OpenTab(new InventoryTransactionView((Lot)selectedItem));
            }
        }

        private void cmboType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (cmboType.SelectedIndex > -1 & IsLoaded)
            {
                LoadTransactions(cmboType.SelectedIndex);
            }
        }

        private void LoadTransactions(int type)
        {
            try
            {
                DataSet data = db.Select("*", InventoryTransaction.Table, InventoryTransaction.Fields.ClientType.ToString() + " = " + type);
                Collection<InventoryTransactionBinding> gridData = data.getBindableCollection<InventoryTransactionBinding>();
                dgTransactions.ItemsSource = gridData;
                data.BuildPrimaryKeyIndex(InventoryTransaction.PrimaryKey);
                gridViewData = data;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Loading Transactions - " + msgCodes.GetString("M2102") + ex.Message, "Error - 2102", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void dgTransactions_AutoGeneratedColumns(object sender, EventArgs e)
        {
            Hashtable textMap = InventoryTransactionBinding.GetDisplayTextMap();
            foreach (DataGridColumn column in dgTransactions.Columns)
            {
                int index = dgTransactions.Columns.IndexOf(column);
                String headerText = column.Header.ToString();
                    if (textMap.ContainsKey(headerText))
                    {
                        dgTransactions.Columns[index].Header = textMap[headerText];
                    }
                
            }
        }

        private void dgTransactions_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                if (dgTransactions.SelectedIndex > -1)
                {
                    InventoryTransactionBinding obj = (InventoryTransactionBinding)dgTransactions.SelectedCells[0].Item;
                    gridViewData.SeekToPrimaryKey(obj.transactionID);
                    InventoryTransaction trans = new InventoryTransaction(gridViewData.GetRecordDataSet());
                    MainWindow.OpenTab(new InventoryTransactionView(trans));
                }
            }
        }

        #region ISTabView Members

        public bool TabIsClosing()
        {
            return true;
        }

        public bool TabIsLosingFocus()
        {
            return true;
        }

        public void TabIsGainingFocus()
        {
            ArrayList actions = new ArrayList();

            IconButton addItemBtn = new IconButton();
            addItemBtn.Text = "New Transaction";
            addItemBtn.Source = (Image)App.iconSet["symbol-add"];
            addItemBtn.MouseDown += new MouseButtonEventHandler(addItemBtn_MouseDown);
            actions.Add(addItemBtn);

            IconButton addRestockTransBtn = new IconButton();
            addRestockTransBtn.Text = "New Restock Transaction";
            addRestockTransBtn.Source = (Image)App.iconSet["symbol-add"];
            addRestockTransBtn.MouseDown += new MouseButtonEventHandler(addRestockTransBtn_MouseDown);
            actions.Add(addRestockTransBtn);

            MainWindow.setActionList(actions);
        }

        public string TabTitle()
        {
            return "Transactions";
        }

        public Image TabIcon()
        {
            return (Image)App.iconSet["symbol-transactions"];
        }

        #endregion
    }
}
