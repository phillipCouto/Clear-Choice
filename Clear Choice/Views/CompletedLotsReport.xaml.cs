using System;
using System.Collections;
using System.Collections.ObjectModel;
using System.Resources;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using Clear_Choice.Windows;
using ClearChoice;
using ExceptionLogging;
using Stemstudios.DataAccessLayer;
using Stemstudios.DataAccessLayer.DataObjects;
using Stemstudios.DataAccessLayer.DataObjects.Bindings;
using Stemstudios.UIControls;

namespace Clear_Choice.Views
{
    /// <summary>
    /// Interaction logic for ListofInventory.xaml
    /// </summary>
    public partial class CompletedLotsReport : UserControl,ISTabView
    {
        private Database db = Database.Instance;
        private DataSet itemRecords = null;
        private ResourceManager msgCodes = MessageCodes.ResourceManager;

        public CompletedLotsReport()
        {
            InitializeComponent();
            loadTable();
            this.Name = "CompletedLotReport";
        }

        private void loadTable()
        {
            try
            {
                DataSet data = db.Select("*", Lot.Table, Lot.Fields.Completed.ToString()+" = 1",Lot.Fields.Address.ToString()+","+Lot.Fields.LotNumber.ToString());

                data.BuildPrimaryKeyIndex(Lot.PrimaryKey);
                Collection<LotBinding> gridData = data.getBindableCollection<LotBinding>();
                this.dgLotsCompleted.ItemsSource = gridData;

                itemRecords = data;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Loading Lots - " + msgCodes.GetString("M2102") + ex.Message, "Error - 2102", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }


        private void dgLotsCompleted_MouseDown(object sender, MouseButtonEventArgs e)
        {
                if (e.ClickCount == 2)
                {
                    if (dgLotsCompleted.SelectedCells.Count > 0)
                    {
                            LotBinding obj = (LotBinding)dgLotsCompleted.SelectedCells[0].Item;
                            itemRecords.SeekToPrimaryKey(obj.lotID);
                            Lot lotObj = new Lot(itemRecords.GetRecordDataSet());
                            MainWindow.OpenTab(new LotView(lotObj), (Image)App.iconSet["home"], lotObj.LotDisplayName());

                    }
                }
            
        }

        private ArrayList Print()
        {
            ArrayList actions = new ArrayList();
            IconButton savenewRepairBtn = new IconButton();
            savenewRepairBtn.Text = "Print";
            savenewRepairBtn.Source = (Image)App.iconSet["symbol-save"];
            savenewRepairBtn.MouseDown += new MouseButtonEventHandler(button1_Click);
            actions.Add(savenewRepairBtn);

            return actions;
        }

        private void button1_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                String title = "Completed Lots Report";
                ArrayList hideFields = new ArrayList();
                ArrayList currenyField = new ArrayList();
                hideFields.Add("lotID");
                hideFields.Add("assocID");
                hideFields.Add("PlanInfo");
                hideFields.Add("PermitNumber");
                hideFields.Add("LotSize");
                hideFields.Add("ServiceSize");
                hideFields.Add("PermitDate");
                hideFields.Add("JobBC");
                hideFields.Add("HoodColour");
                hideFields.Add("Type");
                hideFields.Add("SPColour");
                hideFields.Add("SPType");
                hideFields.Add("Notes");
                hideFields.Add("last<odified");
                hideFields.Add("modifiedBy");
                //hideFields.Add("DisplayName");



                //works but wrong binding:S
                FlowDocument doc = itemRecords.GetFlowDocument(title, hideFields, Time_SheetBinding.GetDisplayTextMap(), currenyField);

                DocumentPreviewer preview = new DocumentPreviewer(doc, title);
                preview.ShowDialog();
            }
            catch (Exception)
            {
                MessageBox.Show("Nothing to print", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void dgLotsCompleted_AutoGeneratedColumns(object sender, EventArgs e)
        {
            Hashtable textMap = LotBinding.getdisplayTextMap();
            foreach (DataGridColumn column in dgLotsCompleted.Columns)
            {
                int index = dgLotsCompleted.Columns.IndexOf(column);
                String headerText = column.Header.ToString();
                if (headerText.Contains("ID"))
                {
                    dgLotsCompleted.Columns[index].Visibility = System.Windows.Visibility.Collapsed;
                }
                else
                {
                    if (textMap.ContainsKey(headerText))
                    {
                        dgLotsCompleted.Columns[index].Header = textMap[headerText];
                    }
                }
            }
        }

        #region ISTabView Members

        public bool TabIsClosing()
        {
            return true;
        }

        public bool TabIsLosingFocus()
        {
            return true;
        }

        public void TabIsGainingFocus()
        {
            MainWindow.setActionList(Print());
        }

        public string TabTitle()
        {
            return "Completed Lots Report";
        }

        public Image TabIcon()
        {
            return (Image)App.iconSet["home"];
        }

        #endregion
    }
}
