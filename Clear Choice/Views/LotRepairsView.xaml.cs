using System;
using System.Collections;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using ClearChoice;
using Stemstudios.DataAccessLayer;
using Stemstudios.DataAccessLayer.DataObjects;
using Stemstudios.DataAccessLayer.DataObjects.Bindings;
using Stemstudios.UIControls;

namespace Clear_Choice.Views
{
    /// <summary>
    /// Interaction logic for LotRepairsView.xaml
    /// </summary>
    public partial class LotRepairsView : UserControl,ISTabView
    {
        private Database db = Database.Instance;
        private Lot mLot;
        private DataSet gridViewData;
        public LotRepairsView(Lot pLot)
        {
            InitializeComponent();
            mLot = pLot;
            LoadRepairs();
            this.Name = "RepairsView" + mLot.GetLotID();
        }

        private void dgRepairs_AutoGeneratedColumns(object sender, EventArgs e)
        {
            Hashtable textMap = LotRepairBinding.GetDisplayTextMap();
            foreach (DataGridColumn column in dgRepairs.Columns)
            {
                int index = dgRepairs.Columns.IndexOf(column);
                String headerText = column.Header.ToString();
                if (headerText.Contains("ID"))
                {
                    dgRepairs.Columns[index].Visibility = System.Windows.Visibility.Collapsed;
                }
                else
                {
                    if (textMap.ContainsKey(headerText))
                    {
                        dgRepairs.Columns[index].Header = textMap[headerText];
                    }
                }
            }
        }

        private void dgRepairs_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                if (dgRepairs.SelectedIndex > -1)
                {
                    LotRepairBinding obj = (LotRepairBinding)dgRepairs.SelectedCells[0].Item;
                    gridViewData.SeekToPrimaryKey(obj.repairID);
                    LotRepair repair = new LotRepair(gridViewData.GetRecordDataSet());
                    MainWindow.OpenTab(new LotRepairView(repair, mLot));
                }
            }
        }

        private void LoadRepairs()
        {
            DataSet data = db.Select("*", LotRepair.Table, LotRepair.Fields.lotID.ToString() + " = '" + mLot.GetLotID() + "'");
            data.BuildPrimaryKeyIndex(LotRepair.PrimaryKey);
            Collection<LotRepairBinding> gridData = data.getBindableCollection<LotRepairBinding>();
            dgRepairs.ItemsSource = gridData;
            gridViewData = data;
        }

        private void saveNewSiteBtn_MouseDown(object sender, MouseButtonEventArgs e)
        {
            MainWindow.OpenTab(new LotRepairView(mLot));
        }

        #region ISTabView Members

        public bool TabIsClosing()
        {
            return true;
        }

        public bool TabIsLosingFocus()
        {
            return true;
        }

        public void TabIsGainingFocus()
        {
            ArrayList actions = new ArrayList();
            IconButton saveNewSiteBtn = new IconButton();
            saveNewSiteBtn.Text = "Add New Repair";
            saveNewSiteBtn.Source = (Image)App.iconSet["symbol-add"];
            saveNewSiteBtn.MouseDown += new MouseButtonEventHandler(saveNewSiteBtn_MouseDown);
            actions.Add(saveNewSiteBtn);

            MainWindow.setActionList(actions);
            LoadRepairs();
        }

        public string TabTitle()
        {
            return mLot.LotDisplayName() + " Repairs";
        }

        public Image TabIcon()
        {
            return (Image)App.iconSet["symbol-repair"];
        }

        #endregion
    }
}
