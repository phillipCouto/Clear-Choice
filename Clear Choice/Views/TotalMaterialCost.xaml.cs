using System;
using System.Collections;
using System.Collections.ObjectModel;
using System.Resources;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;
using ExceptionLogging;
using Stemstudios.DataAccessLayer;
using Stemstudios.DataAccessLayer.DataObjects;
using Stemstudios.DataAccessLayer.DataObjects.Bindings;
using ClearChoice;
using Stemstudios.UIControls;
using System.Windows.Input;
using System.Windows.Documents;
using Clear_Choice.Windows;

namespace Clear_Choice.Views
{
    /// <summary>
    /// Interaction logic for InventoryRecordReport.xaml
    /// </summary>
    public partial class TotalMaterialCost : UserControl
    {
        private Database db = Database.Instance;
        private DataSet itemRecords = null;
        private ResourceManager msgCodes = MessageCodes.ResourceManager;
        private ComboBoxItem builderItem = new ComboBoxItem();

        public TotalMaterialCost()
        {
            this.Name = "TotalMaterialCost";
            InitializeComponent();
            builderItem = (ComboBoxItem)cmboType.SelectedItem;
            LoadGrid();
        }

        private void LoadGrid()
        {
            try
            {
                DataSet data;
                if (cmboType.SelectedItem.Equals(builderItem))
                {
                    data = db.Select("sites.SiteName,Sum(TotalQuantity)AS Quantity, SUM(TotalValue) AS TotalValue", Site.Table + "," + InventoryTransaction.Table, "sites.siteID = inventory_transactions.assocID","sites.SiteName");
                    Collection<TotalMaterialCostSiteBinding> gridData = data.getBindableCollection<TotalMaterialCostSiteBinding>();
                    this.dgLabourHours.ItemsSource = gridData;
                }
                else
                {
                    data = db.Select("lots.LotNumber,lots.Address,lots.City,Sum(TotalQuantity)AS Quantity, SUM(TotalValue) AS TotalValue", Lot.Table + "," + InventoryTransaction.Table, "lots.lotID = inventory_transactions.assocID", "lots.City,lots.Address,lots.LotNumber");
                    Collection<TotalMaterialCostLotBinding> gridData = data.getBindableCollection<TotalMaterialCostLotBinding>();
                    this.dgLabourHours.ItemsSource = gridData;
                }
                itemRecords = data;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Loading Transactions - " + msgCodes.GetString("M2102") + ex.Message, "Error - 2102", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void dgLots_AutoGeneratedColumns(object sender, EventArgs e)
        {
            Hashtable textMap = LotBinding.getdisplayTextMap();
            foreach (DataGridColumn column in dgLabourHours.Columns)
            {
                int index = dgLabourHours.Columns.IndexOf(column);
                String headerText = column.Header.ToString();
                if (headerText.Contains("ID"))
                {
                    dgLabourHours.Columns[index].Visibility = System.Windows.Visibility.Collapsed;
                }
                else
                {
                    if (textMap.ContainsKey(headerText))
                    {
                        dgLabourHours.Columns[index].Header = textMap[headerText];
                    }
                }
            }
        }

        private void UserControl_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (IsVisible)
            {
                MainWindow.setActionList(Print());
            }
        }

        private ArrayList Print()
        {
            ArrayList actions = new ArrayList();
            IconButton savenewRepairBtn = new IconButton();
            savenewRepairBtn.Text = "Print";
            savenewRepairBtn.Source = (Image)App.iconSet["symbol-save"];
            savenewRepairBtn.MouseDown += new MouseButtonEventHandler(button1_Click);
            actions.Add(savenewRepairBtn);

            return actions;
        }

        private void button1_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                String title = "Total Material Cost Report";
                ArrayList hideFields = new ArrayList();
                ArrayList currenyField = new ArrayList();
                currenyField.Add("TotalValue");
                FlowDocument doc;
                if(cmboType.SelectedItem.Equals(builderItem))
                {
                    doc = itemRecords.GetFlowDocument(title, hideFields, TotalMaterialCostSiteBinding.GetDisplayTextMap(), currenyField);
                }
                else
                {
                    doc = itemRecords.GetFlowDocument(title, hideFields, TotalMaterialCostLotBinding.GetDisplayTextMap(), currenyField);
                }

                DocumentPreviewer preview = new DocumentPreviewer(doc, title);
                preview.ShowDialog();
            }
            catch (Exception)
            {
                MessageBox.Show("Nothing to print", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void cmboType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (IsLoaded)
            {
                LoadGrid();
            }
        }
    }
}

