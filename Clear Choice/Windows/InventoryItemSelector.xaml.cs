using System;
using System.Collections;
using System.Collections.ObjectModel;
using System.Resources;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using ExceptionLogging;
using Stemstudios.DataAccessLayer;
using Stemstudios.DataAccessLayer.DataObjects;
using Stemstudios.DataAccessLayer.DataObjects.Bindings;

namespace Clear_Choice.Windows
{
    /// <summary>
    /// Interaction logic for InventoryItemSelector.xaml
    /// </summary>
    public partial class InventoryItemSelector : Window
    {
        public static readonly RoutedEvent ObjectSelectedEvent = EventManager.RegisterRoutedEvent("ObjectSelected", RoutingStrategy.Bubble, typeof(RoutedEventHandler), typeof(InventoryItemSelector));

        public event RoutedEventHandler ObjectSelected
        {
            add { AddHandler(ObjectSelectedEvent, value); }
            remove { RemoveHandler(ObjectSelectedEvent, value); }
        }

        private Database db = Database.Instance;
        private Hashtable dataGridDisplayText;
        private DataSet dataGridViewData;
        private ArrayList itemIDs = new ArrayList();
        public Object SelectedItem;
        private ResourceManager msgCodes = MessageCodes.ResourceManager;

        public InventoryItemSelector()
        {
            InitializeComponent();
            dataGridDisplayText = InventoryItemBinding.getDisplayTextMap();
            LoadItems(null);
            LoadCategories();
            LoadItemIDs(dataGridViewData.GetPrimaryKeySet());
        }

        private void cmboItemID_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                if (itemIDs.Contains(cmboItemID.Text.ToUpper()))
                {
                    DataSet data = db.Select("*", InventoryItem.Table, InventoryItem.Fields.itemID.ToString() + " = '" + cmboItemID.Text.ToUpper()+"'");
                    data.Read();
                    InventoryItem item = new InventoryItem(data.GetRecordDataSet());
                    SelectedItem = item;

                    RoutedEventArgs args = new RoutedEventArgs(ObjectSelectedEvent);
                    RaiseEvent(args);
                    this.Close();
                }
                else
                {
                    MessageBox.Show("Item Does not exist in the database. Please try again or add the missing item.", "Item Does not exist!", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void cmboCategory_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (IsLoaded)
            {
                if (((ComboBoxItem)e.AddedItems[0]).Content.Equals("ALL"))
                {
                    LoadItems(null);
                }
                else
                {
                    LoadItems(((ComboBoxItem)e.AddedItems[0]).Content.ToString());
                }
            }
        }

        private void dgItems_AutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (DataGridColumn column in dgItems.Columns)
            {
                int index = dgItems.Columns.IndexOf(column);
                String headerText = column.Header.ToString();
                    if (dataGridDisplayText.ContainsKey(headerText))
                    {
                        dgItems.Columns[index].Header = dataGridDisplayText[headerText];
                    }
                
            }
        }

        private void dgItems_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                if (dgItems.SelectedCells.Count > 0)
                {
                    InventoryItemBinding obj = (InventoryItemBinding)dgItems.SelectedCells[0].Item;
                    dataGridViewData.SeekToPrimaryKey(obj.itemID);
                    InventoryItem item = new InventoryItem(dataGridViewData.GetRecordDataSet());
                    SelectedItem = item;

                    RoutedEventArgs args = new RoutedEventArgs(ObjectSelectedEvent);
                    RaiseEvent(args);
                    this.Close();
                }
            }
        }
        private void LoadItems(String cat)
        {
            try
            {
                DataSet data;
                if (cat == null)
                {
                    data = db.Select("*", InventoryItem.Table);
                }
                else
                {
                    data = db.Select("*", InventoryItem.Table, InventoryItem.Fields.Category.ToString() + " = '" + cat + "'");
                }
                data.BuildPrimaryKeyIndex(InventoryItem.PrimaryKey);
                Collection<InventoryItemBinding> gridData = data.getBindableCollection<InventoryItemBinding>();
                dgItems.ItemsSource = gridData;
                dataGridViewData = data;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Failed to Load Items - " + msgCodes.GetString("M2102") + ex.Message , "Error - 2102", MessageBoxButton.OK, MessageBoxImage.Error);
                this.Close();
            }
        }
        private void LoadCategories()
        {
            try
            {
                DataSet cats = db.Select("DISTINCT " + InventoryItem.Fields.Category.ToString(), InventoryItem.Table);

                cmboCategory.Items.Clear();

                ComboBoxItem item = new ComboBoxItem();
                item.Content = "ALL";
                cmboCategory.Items.Add(item);

                while (cats.Read())
                {
                    item = new ComboBoxItem();
                    item.Content = cats.getString(InventoryItem.Fields.Category.ToString());
                    cmboCategory.Items.Add(item);
                }
                cmboCategory.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Failed to Load Categories - " + msgCodes.GetString("M2102")+ex.Message, "Error - 2102", MessageBoxButton.OK, MessageBoxImage.Error);
                this.Close();
            }
        }
        private void LoadItemIDs(ICollection keys)
        {
            cmboItemID.Items.Clear();
            itemIDs.Clear();
            foreach (Object key in keys)
            {
                ComboBoxItem item = new ComboBoxItem();
                item.Content = key.ToString();
                cmboItemID.Items.Add(item);
                itemIDs.Add(key);
            }
        }
    }
}
