using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Stemstudios.DataAccessLayer;
using System.Collections.ObjectModel;
using Stemstudios.DataAccessLayer.DataObjects.Bindings;
using Stemstudios.DataAccessLayer.DataObjects;
using Microsoft.Windows.Controls;
using System.Collections;

namespace Clear_Choice.Windows
{
    /// <summary>
    /// Interaction logic for SiteLotSelector.xaml
    /// </summary>
    public partial class SiteLotSelector : Window
    {
        public static readonly RoutedEvent ObjectSelectedEvent = EventManager.RegisterRoutedEvent("ObjectSelected", RoutingStrategy.Bubble, typeof(TextChangedEventHandler), typeof(SiteLotSelector));

        public event RoutedEventHandler ObjectSelected
        {
            add { AddHandler(ObjectSelectedEvent, value); }
            remove { RemoveHandler(ObjectSelectedEvent, value); }
        }

        private Database db = Database.Instance;
        private Hashtable dataGridDisplayText;
        private DataSet dataGridViewData;
        public Object SelectedItem;
        public SiteLotSelector()
        {
            InitializeComponent();
            LoadSites();
        }

        private void dgSitesOrLots_AutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (DataGridColumn column in dgSitesOrLots.Columns)
            {
                int index = dgSitesOrLots.Columns.IndexOf(column);
                String headerText = column.Header.ToString();
                if (headerText.Contains("ID"))
                {
                    dgSitesOrLots.Columns[index].Visibility = System.Windows.Visibility.Collapsed;
                }
                else
                {
                    if (dataGridDisplayText.ContainsKey(headerText))
                    {
                        dgSitesOrLots.Columns[index].Header = dataGridDisplayText[headerText];
                    }
                }
            }
        }

        private void dgSitesOrLots_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                if (dgSitesOrLots.SelectedCells.Count > 0)
                {
                    SelectedItem = null;
                    if (cmboType.SelectedIndex == 0)
                    {
                        SiteBinding obj = (SiteBinding)dgSitesOrLots.SelectedCells[0].Item;
                        dataGridViewData.SeekToPrimaryKey(obj.siteID);
                        Site siteObj = new Site(dataGridViewData.GetRecordDataSet());
                        SelectedItem = siteObj;
                    }
                    else
                    {
                        LotSelectorBinding obj = (LotSelectorBinding)dgSitesOrLots.SelectedCells[0].Item;
                        dataGridViewData.SeekToPrimaryKey(obj.lotID);
                        Lot lotObj = new Lot(dataGridViewData.GetRecordDataSet());
                        SelectedItem = lotObj;
                    }
                    RoutedEventArgs args = new RoutedEventArgs(ObjectSelectedEvent);
                    RaiseEvent(args);
                    this.Close();
                }
            }
        }

        private void LoadSites()
        {
            DataSet data = db.Select("*", Site.Table, null, Site.Fields.SiteName.ToString());
            Collection<SiteBinding> gridData = data.getBindableCollection<SiteBinding>();
            dgSitesOrLots.ItemsSource = gridData;
            dataGridDisplayText = SiteBinding.getdisplayTextMap();
            dataGridViewData = data;
            dataGridViewData.BuildPrimaryKeyIndex(Site.PrimaryKey);
        }

        private void LoadLots()
        {
            DataSet data = db.Select("lots.*,clients.Name", "clients LEFT JOIN lots ON clients.clientID = lots.assocID", "clients.ClientType = 1", "clients.Name ASC");
            Collection<LotSelectorBinding> gridData = data.getBindableCollection<LotSelectorBinding>();
            dgSitesOrLots.ItemsSource = gridData;
            dataGridDisplayText = LotSelectorBinding.getdisplayTextMap();
            dataGridViewData = data;
            dataGridViewData.BuildPrimaryKeyIndex(Lot.PrimaryKey);
        }

        private void cmboType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (IsLoaded)
            {
                if (cmboType.SelectedIndex == 0)
                {
                    LoadSites();
                }
                else
                {
                    LoadLots();
                }
            }
        }
    }
}
